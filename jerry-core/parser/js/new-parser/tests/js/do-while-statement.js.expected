
--- Script parsing start ---

  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_IDENT idx:1->ident(a)
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_NEW_IDENT idx:1->ident(a) byte_arg:0
  [  0] CBC_BRANCH_IF_FALSE_BACKWARD
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:2->ident(x)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_BACKWARD
  [  1] CBC_PUSH_IDENT idx:1->ident(a)
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:2->ident(x) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:3->ident(y) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:4->ident(z) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_IDENT idx:1->ident(a)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_PUSH_TRUE
  [  1] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_FALSE
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

Final byte code dump:

  Maximum stack depth: 1
  Literal encoding: small
  Argument range end: 0
  Register range end: 0
  Identifier range end: 5
  Const literal range end: 5
  Literal range end: 5

   0 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
   2 : CBC_POP_BLOCK
   3 : CBC_PUSH_IDENT idx:1(ident)->ident(a)
   5 : CBC_BRANCH_IF_TRUE_BACKWARD offset:2(->3)
   7 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
   9 : CBC_POP_BLOCK
  10 : CBC_NEW_IDENT byte_arg:0 idx:1(ident)->ident(a)
  13 : CBC_BRANCH_IF_FALSE_BACKWARD offset:3(->10)
  15 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
  17 : CBC_POP_BLOCK
  18 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:2(ident)->ident(x)
  20 : CBC_POP_BLOCK
  21 : CBC_JUMP_BACKWARD offset:3(->18)
  23 : CBC_PUSH_IDENT idx:1(ident)->ident(a)
  25 : CBC_BRANCH_IF_TRUE_BACKWARD offset:7(->18)
  27 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
  29 : CBC_POP_BLOCK
  30 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:2(ident)->ident(x)
  33 : CBC_POP_BLOCK
  34 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:3(ident)->ident(y)
  37 : CBC_POP_BLOCK
  38 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:4(ident)->ident(z)
  41 : CBC_POP_BLOCK
  42 : CBC_PUSH_IDENT idx:1(ident)->ident(a)
  44 : CBC_BRANCH_IF_FALSE_FORWARD offset:5(->49)
  46 : CBC_PUSH_TRUE
  47 : CBC_JUMP_FORWARD offset:3(->50)
  49 : CBC_PUSH_FALSE
  50 : CBC_BRANCH_IF_TRUE_BACKWARD offset:20(->30)
  52 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
  54 : CBC_POP_BLOCK
  55 : CBC_RETURN_WITH_UNDEFINED

Byte code size: 56 bytes

Script parsing successfully completed. Total byte code size: 56 bytes

--- Script parsing end ---

