
--- Script parsing start ---

  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_MULTIPLY_TWO_LITERALS idx:1->ident(a) idx:2->ident(b)
  [  1] CBC_SUBTRACT_RIGHT_LITERAL idx:3->ident(c)
  [  0] CBC_POP
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_IDENT idx:4->ident(x)
  [  0] CBC_POP
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:4->ident(x) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:5->ident(y) byte_arg:0
  [  3] CBC_PUSH_TWO_LITERALS idx:1->ident(a) idx:2->ident(b)
  [  3] CBC_MULTIPLY_RIGHT_LITERAL idx:3->ident(c)
  [  2] CBC_ADD
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_IDENT idx:2->ident(b)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_IDENT idx:3->ident(c)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  3] CBC_PUSH_TWO_LITERALS idx:6->ident(d) idx:6->ident(d)
  [  3] CBC_CALL_PUSH_RESULT byte_arg:0
  [  2] CBC_ADD
  [  1] CBC_STRICT_EQUAL
  [  0] CBC_BRANCH_IF_TRUE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:5->ident(y) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:7->ident(z) byte_arg:0
  [  2] CBC_PUSH_IDENT idx:1->ident(a)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_IDENT idx:2->ident(b)
  [  1] CBC_STRICT_EQUAL
  [  0] CBC_BRANCH_IF_TRUE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:7->ident(z) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:7->ident(z) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  2] CBC_PUSH_TWO_LITERALS idx:8->ident(n) idx:1->ident(a)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_IDENT idx:2->ident(b)
  [  1] CBC_STRICT_EQUAL
  [  0] CBC_BRANCH_IF_TRUE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:1->ident(a)
  [  0] CBC_POP_BLOCK
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:3->ident(c)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:2->ident(b)
  [  0] CBC_POP_BLOCK
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:7->ident(z) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:7->ident(z) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:5->ident(y) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:5->ident(y) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  2] CBC_PUSH_TWO_LITERALS idx:5->ident(y) idx:1->ident(a)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_IDENT idx:2->ident(b)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_IDENT idx:3->ident(c)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_IDENT idx:3->ident(c)
  [  1] CBC_STRICT_EQUAL
  [  0] CBC_BRANCH_IF_TRUE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:1->ident(a) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_IDENT idx:8->ident(n)
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_FALSE
  [  0] CBC_POP
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_NULL
  [  2] CBC_PUSH_IDENT idx:1->ident(a)
  [  1] CBC_BRANCH_IF_FALSE_FORWARD
  [  2] CBC_PUSH_IDENT idx:2->ident(b)
  [  1] CBC_BRANCH_IF_FALSE_FORWARD
  [  3] CBC_PUSH_TWO_LITERALS idx:3->ident(c) idx:8->ident(n)
  [  2] CBC_BRANCH_IF_FALSE_FORWARD
  [  3] CBC_PUSH_TRUE
  [  3] CBC_JUMP_FORWARD
  [  3] CBC_PUSH_FALSE
  [  2] CBC_PROP_GET
  [  1] CBC_BRANCH_IF_FALSE_FORWARD
  [  2] CBC_PUSH_FALSE
  [  2] CBC_JUMP_FORWARD
  [  2] CBC_PUSH_TRUE
  [  2] CBC_JUMP_FORWARD
  [  2] CBC_PUSH_IDENT idx:6->ident(d)
  [  2] CBC_JUMP_FORWARD
  [  2] CBC_PUSH_IDENT idx:9->ident(e)
  [  1] CBC_STRICT_EQUAL
  [  0] CBC_BRANCH_IF_TRUE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:10->ident(f)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

Final byte code dump:

  Maximum stack depth: 3
  Literal encoding: small
  Argument range end: 0
  Register range end: 0
  Identifier range end: 11
  Const literal range end: 11
  Literal range end: 11

   0 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
   2 : CBC_POP_BLOCK
   3 : CBC_MULTIPLY_TWO_LITERALS idx:1(ident)->ident(a) idx:2(ident)->ident(b)
   6 : CBC_SUBTRACT_RIGHT_LITERAL idx:3(ident)->ident(c)
   8 : CBC_POP
   9 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
  11 : CBC_POP_BLOCK
  12 : CBC_PUSH_IDENT idx:4(ident)->ident(x)
  14 : CBC_POP
  15 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:4(ident)->ident(x)
  18 : CBC_POP_BLOCK
  19 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
  21 : CBC_POP_BLOCK
  22 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:5(ident)->ident(y)
  25 : CBC_PUSH_TWO_LITERALS idx:1(ident)->ident(a) idx:2(ident)->ident(b)
  28 : CBC_MULTIPLY_RIGHT_LITERAL idx:3(ident)->ident(c)
  30 : CBC_ADD
  31 : CBC_BRANCH_IF_STRICT_EQUAL offset:21(->52)
  33 : CBC_PUSH_IDENT idx:2(ident)->ident(b)
  35 : CBC_BRANCH_IF_STRICT_EQUAL offset:86(->121)
  37 : CBC_PUSH_IDENT idx:3(ident)->ident(c)
  39 : CBC_BRANCH_IF_STRICT_EQUAL offset:82(->121)
  41 : CBC_PUSH_TWO_LITERALS idx:6(ident)->ident(d) idx:6(ident)->ident(d)
  44 : CBC_CALL_PUSH_RESULT byte_arg:0
  46 : CBC_ADD
  47 : CBC_STRICT_EQUAL
  48 : CBC_BRANCH_IF_TRUE_FORWARD offset:77(->125)
  50 : CBC_JUMP_FORWARD offset:75(->125)
  52 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:5(ident)->ident(y)
  55 : CBC_POP_BLOCK
  56 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:7(ident)->ident(z)
  59 : CBC_PUSH_IDENT idx:1(ident)->ident(a)
  61 : CBC_BRANCH_IF_STRICT_EQUAL offset:13(->74)
  63 : CBC_PUSH_IDENT idx:2(ident)->ident(b)
  65 : CBC_STRICT_EQUAL
  66 : CBC_BRANCH_IF_TRUE_FORWARD offset:14(->80)
  68 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:7(ident)->ident(z)
  71 : CBC_POP_BLOCK
  72 : CBC_JUMP_FORWARD offset:43(->115)
  74 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:7(ident)->ident(z)
  77 : CBC_POP_BLOCK
  78 : CBC_JUMP_FORWARD offset:37(->115)
  80 : CBC_PUSH_TWO_LITERALS idx:8(ident)->ident(n) idx:1(ident)->ident(a)
  83 : CBC_BRANCH_IF_STRICT_EQUAL offset:9(->92)
  85 : CBC_PUSH_IDENT idx:2(ident)->ident(b)
  87 : CBC_STRICT_EQUAL
  88 : CBC_BRANCH_IF_TRUE_FORWARD offset:14(->102)
  90 : CBC_JUMP_FORWARD offset:7(->97)
  92 : CBC_JUMP_FORWARD offset:33(->125)
  94 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:1(ident)->ident(a)
  96 : CBC_POP_BLOCK
  97 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:3(ident)->ident(c)
  99 : CBC_POP_BLOCK
 100 : CBC_JUMP_FORWARD offset:5(->105)
 102 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:2(ident)->ident(b)
 104 : CBC_POP_BLOCK
 105 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:7(ident)->ident(z)
 108 : CBC_POP_BLOCK
 109 : CBC_JUMP_FORWARD offset:6(->115)
 111 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:7(ident)->ident(z)
 114 : CBC_POP_BLOCK
 115 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:5(ident)->ident(y)
 118 : CBC_POP_BLOCK
 119 : CBC_JUMP_FORWARD offset:6(->125)
 121 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:5(ident)->ident(y)
 124 : CBC_POP_BLOCK
 125 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
 127 : CBC_POP_BLOCK
 128 : CBC_JUMP_FORWARD offset:32(->160)
 130 : CBC_PUSH_TWO_LITERALS idx:5(ident)->ident(y) idx:1(ident)->ident(a)
 133 : CBC_BRANCH_IF_STRICT_EQUAL offset:15(->148)
 135 : CBC_PUSH_IDENT idx:2(ident)->ident(b)
 137 : CBC_BRANCH_IF_STRICT_EQUAL offset:11(->148)
 139 : CBC_PUSH_IDENT idx:3(ident)->ident(c)
 141 : CBC_BRANCH_IF_STRICT_EQUAL offset:13(->154)
 143 : CBC_PUSH_IDENT idx:3(ident)->ident(c)
 145 : CBC_STRICT_EQUAL
 146 : CBC_BRANCH_IF_TRUE_FORWARD offset:10(->156)
 148 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:1(ident)->ident(a)
 151 : CBC_POP_BLOCK
 152 : CBC_JUMP_FORWARD offset:8(->160)
 154 : CBC_JUMP_FORWARD offset:6(->160)
 156 : CBC_JUMP_FORWARD offset:4(->160)
 158 : CBC_JUMP_FORWARD offset:6(->164)
 160 : CBC_PUSH_IDENT idx:8(ident)->ident(n)
 162 : CBC_BRANCH_IF_TRUE_BACKWARD offset:32(->130)
 164 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
 166 : CBC_POP_BLOCK
 167 : CBC_PUSH_FALSE
 168 : CBC_POP
 169 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
 171 : CBC_POP_BLOCK
 172 : CBC_PUSH_NULL
 173 : CBC_PUSH_IDENT idx:1(ident)->ident(a)
 175 : CBC_BRANCH_IF_FALSE_FORWARD offset:28(->203)
 177 : CBC_PUSH_IDENT idx:2(ident)->ident(b)
 179 : CBC_BRANCH_IF_FALSE_FORWARD offset:20(->199)
 181 : CBC_PUSH_TWO_LITERALS idx:3(ident)->ident(c) idx:8(ident)->ident(n)
 184 : CBC_BRANCH_IF_FALSE_FORWARD offset:5(->189)
 186 : CBC_PUSH_TRUE
 187 : CBC_JUMP_FORWARD offset:3(->190)
 189 : CBC_PUSH_FALSE
 190 : CBC_PROP_GET
 191 : CBC_BRANCH_IF_FALSE_FORWARD offset:5(->196)
 193 : CBC_PUSH_FALSE
 194 : CBC_JUMP_FORWARD offset:3(->197)
 196 : CBC_PUSH_TRUE
 197 : CBC_JUMP_FORWARD offset:4(->201)
 199 : CBC_PUSH_IDENT idx:6(ident)->ident(d)
 201 : CBC_JUMP_FORWARD offset:4(->205)
 203 : CBC_PUSH_IDENT idx:9(ident)->ident(e)
 205 : CBC_STRICT_EQUAL
 206 : CBC_BRANCH_IF_TRUE_FORWARD offset:4(->210)
 208 : CBC_JUMP_FORWARD offset:5(->213)
 210 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:10(ident)->ident(f)
 212 : CBC_POP_BLOCK
 213 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
 215 : CBC_POP_BLOCK
 216 : CBC_RETURN_WITH_UNDEFINED

Byte code size: 217 bytes

Script parsing successfully completed. Total byte code size: 217 bytes

--- Script parsing end ---

