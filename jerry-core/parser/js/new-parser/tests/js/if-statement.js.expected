
--- Script parsing start ---

  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_IDENT idx:1->ident(a)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_PUSH_IDENT idx:2->ident(b)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_PUSH_IDENT idx:3->ident(c)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:4->ident(d) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_IDENT idx:1->ident(a)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_IDENT idx:2->ident(b)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:3->ident(c) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_IDENT idx:4->ident(d)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:5->ident(e) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:6->ident(f) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_IDENT idx:1->ident(a)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_PUSH_IDENT idx:2->ident(b)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_PUSH_IDENT idx:3->ident(c)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:4->ident(d) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:5->ident(e) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_IDENT idx:6->ident(f)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:7->ident(g) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:8->ident(h) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:9->ident(i) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_IDENT idx:1->ident(a)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:10->ident(x)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_IDENT idx:1->ident(a)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:10->ident(x)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_IDENT idx:1->ident(a)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:11->ident(y)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_IDENT idx:1->ident(a)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:11->ident(y)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

Final byte code dump:

  Maximum stack depth: 1
  Literal encoding: small
  Argument range end: 0
  Register range end: 0
  Identifier range end: 12
  Const literal range end: 12
  Literal range end: 12

   0 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
   2 : CBC_POP_BLOCK
   3 : CBC_PUSH_IDENT idx:1(ident)->ident(a)
   5 : CBC_BRANCH_IF_FALSE_FORWARD offset:14(->19)
   7 : CBC_PUSH_IDENT idx:2(ident)->ident(b)
   9 : CBC_BRANCH_IF_FALSE_FORWARD offset:10(->19)
  11 : CBC_PUSH_IDENT idx:3(ident)->ident(c)
  13 : CBC_BRANCH_IF_FALSE_FORWARD offset:6(->19)
  15 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:4(ident)->ident(d)
  18 : CBC_POP_BLOCK
  19 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
  21 : CBC_POP_BLOCK
  22 : CBC_PUSH_IDENT idx:1(ident)->ident(a)
  24 : CBC_BRANCH_IF_FALSE_FORWARD offset:4(->28)
  26 : CBC_JUMP_FORWARD offset:26(->52)
  28 : CBC_PUSH_IDENT idx:2(ident)->ident(b)
  30 : CBC_BRANCH_IF_FALSE_FORWARD offset:8(->38)
  32 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:3(ident)->ident(c)
  35 : CBC_POP_BLOCK
  36 : CBC_JUMP_FORWARD offset:16(->52)
  38 : CBC_PUSH_IDENT idx:4(ident)->ident(d)
  40 : CBC_BRANCH_IF_FALSE_FORWARD offset:8(->48)
  42 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:5(ident)->ident(e)
  45 : CBC_POP_BLOCK
  46 : CBC_JUMP_FORWARD offset:6(->52)
  48 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:6(ident)->ident(f)
  51 : CBC_POP_BLOCK
  52 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
  54 : CBC_POP_BLOCK
  55 : CBC_PUSH_IDENT idx:1(ident)->ident(a)
  57 : CBC_BRANCH_IF_FALSE_FORWARD offset:38(->95)
  59 : CBC_PUSH_IDENT idx:2(ident)->ident(b)
  61 : CBC_BRANCH_IF_FALSE_FORWARD offset:18(->79)
  63 : CBC_PUSH_IDENT idx:3(ident)->ident(c)
  65 : CBC_BRANCH_IF_FALSE_FORWARD offset:8(->73)
  67 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:4(ident)->ident(d)
  70 : CBC_POP_BLOCK
  71 : CBC_JUMP_FORWARD offset:6(->77)
  73 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:5(ident)->ident(e)
  76 : CBC_POP_BLOCK
  77 : CBC_JUMP_FORWARD offset:16(->93)
  79 : CBC_PUSH_IDENT idx:6(ident)->ident(f)
  81 : CBC_BRANCH_IF_FALSE_FORWARD offset:8(->89)
  83 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:7(ident)->ident(g)
  86 : CBC_POP_BLOCK
  87 : CBC_JUMP_FORWARD offset:6(->93)
  89 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:8(ident)->ident(h)
  92 : CBC_POP_BLOCK
  93 : CBC_JUMP_FORWARD offset:6(->99)
  95 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:9(ident)->ident(i)
  98 : CBC_POP_BLOCK
  99 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
 101 : CBC_POP_BLOCK
 102 : CBC_PUSH_IDENT idx:1(ident)->ident(a)
 104 : CBC_BRANCH_IF_FALSE_FORWARD offset:2(->106)
 106 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:10(ident)->ident(x)
 108 : CBC_POP_BLOCK
 109 : CBC_PUSH_IDENT idx:1(ident)->ident(a)
 111 : CBC_BRANCH_IF_FALSE_FORWARD offset:2(->113)
 113 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:10(ident)->ident(x)
 115 : CBC_POP_BLOCK
 116 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
 118 : CBC_POP_BLOCK
 119 : CBC_PUSH_IDENT idx:1(ident)->ident(a)
 121 : CBC_BRANCH_IF_FALSE_FORWARD offset:2(->123)
 123 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:11(ident)->ident(y)
 125 : CBC_POP_BLOCK
 126 : CBC_PUSH_IDENT idx:1(ident)->ident(a)
 128 : CBC_BRANCH_IF_FALSE_FORWARD offset:2(->130)
 130 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:11(ident)->ident(y)
 132 : CBC_POP_BLOCK
 133 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
 135 : CBC_POP_BLOCK
 136 : CBC_RETURN_WITH_UNDEFINED

Byte code size: 137 bytes

Script parsing successfully completed. Total byte code size: 137 bytes

--- Script parsing end ---

